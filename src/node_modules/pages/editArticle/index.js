import React, { useEffect, useState, useContext } from 'react'
import { Redirect } from 'react-router'

import ArticleForm from 'components/articleForm'
import useFetch from 'hooks/useFetch'
import {CurrentUserContext} from 'contexts/currentUser'

const EditArticle = ({match}) => {
    const slug = match.params.slug
    const apiUrl = `/articles/${slug}`
    const [currentUserState] = useContext(CurrentUserContext)
    const [{response: fetchArticleResponse},doFetchArticle] = useFetch(apiUrl)
    const [{response: updateArtilceResponse, error: updateArticleError}, doUpdateFetch] = useFetch(apiUrl)
    const [initialValues, setInitilaValues] = useState(null)
    const [isSuccessfullSubmit, setIsSuccessfullSubmit] = useState(false)

    const handleSubmit = (article) => {
        doUpdateFetch({
            method: 'put',
            data: {
                article
            }
        })
    }

    useEffect(() => {
        doFetchArticle()
    }, [doFetchArticle])

    useEffect(() => {
        if (!fetchArticleResponse) {
            return
        }

        setInitilaValues({
            title: fetchArticleResponse.article.title,
            body: fetchArticleResponse.article.body,
            description: fetchArticleResponse.article.description,
            tagList: fetchArticleResponse.article.tagList
        })
    }, [fetchArticleResponse])

    useEffect(() => {
        if(!updateArtilceResponse){
            return
        }
        setIsSuccessfullSubmit(true)
    },[updateArtilceResponse])

    if(currentUserState.isLoggedIn === false) {
        return <Redirect to='/'/>
    }

    if (isSuccessfullSubmit) {
        return <Redirect to={`/articles/${slug}`}/>
    }
    return (
        <ArticleForm onSubmit={handleSubmit} errors={(updateArticleError && updateArticleError.errors) || {}} initialValues={initialValues}/>
    )
}

export default EditArticle